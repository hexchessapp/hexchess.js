import { HexChess } from '../src/hexchess'

test('isThreefoldRepetition', () => {
  const chess = new HexChess()
  chess.move({ from: 'f1', to: 'g2' })
  chess.move({ from: 'f11', to: 'g9' })
  chess.move({ from: 'g2', to: 'f1' })
  chess.move({ from: 'g9', to: 'f11' })
  chess.move({ from: 'f1', to: 'g2' })
  chess.move({ from: 'f11', to: 'g9' })
  chess.move({ from: 'g2', to: 'f1' })
  chess.move({ from: 'g9', to: 'f11' })
  chess.move({ from: 'f1', to: 'g2' })
  expect(chess.isThreefoldRepetition()).toEqual(true)
})

test('isThreefoldRepetition almost', () => {
  const chess = new HexChess()
  chess.move({ from: 'f1', to: 'g2' })
  chess.move({ from: 'f11', to: 'g9' })
  chess.move({ from: 'g2', to: 'f1' })
  chess.move({ from: 'g9', to: 'f11' })
  chess.move({ from: 'f1', to: 'g2' })
  chess.move({ from: 'f11', to: 'g9' })
  chess.move({ from: 'g2', to: 'f1' })
  expect(chess.isThreefoldRepetition()).toEqual(false)
})

test('isThreefoldRepetition after', () => {
  const chess = new HexChess()
  chess.move({ from: 'f1', to: 'g2' })
  chess.move({ from: 'f11', to: 'g9' })
  chess.move({ from: 'g2', to: 'f1' })
  chess.move({ from: 'g9', to: 'f11' })
  chess.move({ from: 'f1', to: 'g2' })
  chess.move({ from: 'f11', to: 'g9' })
  chess.move({ from: 'g2', to: 'f1' })
  chess.move({ from: 'g9', to: 'f11' })
  chess.move({ from: 'f1', to: 'g2' })
  chess.move({ from: 'f11', to: 'g9' })
  expect(chess.isThreefoldRepetition()).toEqual(true)
})
